<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sKeeper_Archives</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//States
enum bossState
{
    Idle,
    Phase1,
    Phase2,
    Phase3,
    Dead
}

//Name
name = "Keeper of the Archives";

//HP
totalhp = 6500;
currenthp = totalhp;

//Attack Speed
attackSpeed = 120;
alarm[0] = attackSpeed;

//Damage
damage = 22;

//Attack Range
attackRange = 256;

//Current State
state = bossState.Idle;
alarm[1] = 120

proj1exists = false;
proj2exists = false;
proj3exists = false;

firstShield = false;
secondShield = false;
shieldUp = false;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>state = bossState.Phase1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>alarm[0] = attackSpeed;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>switch(state)
{
    case bossState.Phase1:
        if(alarm[0] = attackSpeed)
        {
            lo = instance_create(x, y, oBossProjectile);
            lo.direction = point_direction(x, y, oPlayer.x, oPlayer.y) - 10;
            
            lm = instance_create(x, y, oBossProjectile);
            lm.direction = point_direction(x, y, oPlayer.x, oPlayer.y) - 3;
            
            rm = instance_create(x, y, oBossProjectile);
            rm.direction = point_direction(x, y, oPlayer.x, oPlayer.y) + 3;
            
            ro = instance_create(x, y, oBossProjectile);
            ro.direction = point_direction(x, y, oPlayer.x, oPlayer.y) + 10;
        }
        
        if(currenthp &lt; (totalhp * 0.7))
        {
            state = bossState.Phase2;
        }
        
        break;
        
    case bossState.Phase2:
        if(firstShield = false)
        {
            instance_create(x, y, oBoss_Shield);
            firstShield = true;
            shieldUp = true;
        }
        
        if(proj1exists = false)
        {
            p1 = instance_create(x, y, oBossPersistentProjectile);
            p1.direction = irandom_range(0, 360);
            proj1exists = true;
        }
        
        if(alarm[0] = attackSpeed)
        {
            lo = instance_create(x, y, oBossProjectile);
            lo.direction = point_direction(x, y, oPlayer.x, oPlayer.y) - 10;
            
            lm = instance_create(x, y, oBossProjectile);
            lm.direction = point_direction(x, y, oPlayer.x, oPlayer.y) - 3;
            
            rm = instance_create(x, y, oBossProjectile);
            rm.direction = point_direction(x, y, oPlayer.x, oPlayer.y) + 3;
            
            ro = instance_create(x, y, oBossProjectile);
            ro.direction = point_direction(x, y, oPlayer.x, oPlayer.y) + 10;
        }
        
        if(currenthp &lt; (totalhp * 0.4))
        {
            state = bossState.Phase3;
        }
        
        break;
        
    case bossState.Phase3:
        if(secondShield = false)
        {
            instance_create(x, y, oBoss_Shield);
            secondShield = true;
            shieldUp = true;
        }
    
        if(proj2exists = false)
        {
            p2 = instance_create(x, y, oBossPersistentProjectile);
            p2.direction = irandom_range(0, 360);
            proj2exists = true;
        }
        
        if(proj3exists = false)
        {
            p3 = instance_create(x, y, oBossPersistentProjectile);
            p3.direction = irandom_range(0, 360);
            proj3exists = true;
        }
        
        if(alarm[0] = attackSpeed)
        {
            lo = instance_create(x, y, oBossProjectile);
            lo.direction = point_direction(x, y, oPlayer.x, oPlayer.y) - 10;
            
            lm = instance_create(x, y, oBossProjectile);
            lm.direction = point_direction(x, y, oPlayer.x, oPlayer.y) - 3;
            
            rm = instance_create(x, y, oBossProjectile);
            rm.direction = point_direction(x, y, oPlayer.x, oPlayer.y) + 3;
            
            ro = instance_create(x, y, oBossProjectile);
            ro.direction = point_direction(x, y, oPlayer.x, oPlayer.y) + 10;
        }
        
        if(currenthp &lt;= 0)
        {
            state = bossState.Dead;
        }
        
        break;
        
    case bossState.Dead:
        sprite_index = sKeeper_Archives_Dead;
        if(image_index = image_number - 1)
        {
            instance_destroy();
        }
        
        break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>healthbarStart = (view_wport[0] / 2) - 65;
bossHP = oKeeper_Archives.currenthp/oKeeper_Archives.totalhp;

if(bossHP == 1)
{
    healthbarEnd = (view_wport[0] / 2) + 59;
    healthLength = healthbarEnd - healthbarStart - 7;
    
    draw_sprite(sBoss_Healthbar, 0, view_wport[0] / 2, 45);
    draw_sprite(sUI_HealthLeftFill, 0, healthbarStart, 38);
    draw_sprite_stretched(sUI_Health, 0, healthbarStart + 7, 38, healthLength, 14);
    draw_sprite(sUI_HealthRightFill, 0, healthbarEnd, 38);
}
else if(bossHP &gt;= 0.02)
{
    healthbarEnd = ((view_wport[0] / 2) - 72) + (131 * bossHP)
    healthLength = healthbarEnd - healthbarStart - 7;
    
    draw_sprite(sBoss_Healthbar, 0, view_wport[0] / 2, 45);
    draw_sprite(sUI_HealthLeftFill, 0, healthbarStart, 38);
    draw_sprite_stretched(sUI_Health, 0, healthbarStart + 7, 38, healthLength, 14);
    draw_sprite(sUI_HealthRightFill, 0, healthbarEnd, 38);
}
else if(bossHP &lt; 0.02)
{
    draw_sprite(sBoss_Healthbar, 0, view_wport[0] / 2, 45);
    healthbarEnd = (view_wport[0] / 2) - 72;
}

if(shieldUp = true)
{
    shieldHP = oBoss_Shield.currenthp / oBoss_Shield.totalhp;    

    shieldStart = (view_wport[0] / 2) - 65;
    shieldEnd = ((view_wport[0] / 2) - 72) + (131 * shieldHP)
    shieldLength = shieldEnd - shieldStart - 7;
    
    draw_sprite(sBoss_Healthbar, 0, view_wport[0] / 2, 80);
    draw_sprite(sUI_ShieldLeftFill, 0, shieldStart, 73);
    draw_sprite_stretched(sUI_Shield, 0, shieldStart + 7, 73, shieldLength, 14);
    draw_sprite(sUI_ShieldRightFill, 0, shieldEnd, 73);
    
    draw_set_font(UI_Small);
    draw_set_halign(fa_center);
    draw_set_valign(fa_middle);
    draw_text_outline(view_wport[0]/2, 80, string(oBoss_Shield.currenthp) + "/" + string(oBoss_Shield.totalhp), c_white, c_black);
    draw_text_outline(view_wport[0]/2, 62, string("Shield"), c_white, c_black);
}

draw_set_font(UI_Small);
draw_set_halign(fa_center);
draw_set_valign(fa_middle);
draw_text_outline(view_wport[0]/2, 45, string(oKeeper_Archives.currenthp) + "/" + string(oKeeper_Archives.totalhp), c_white, c_black);

draw_set_font(UI_Boss);
draw_text_outline(view_wport[0]/2, 25, string("Keeper of the Archives"), c_white, c_black);


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
