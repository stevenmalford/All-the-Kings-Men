<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>depth = -10000000000000000000000000000000000000;

cursor_sprite = sCursor;
window_set_cursor(cr_none);

healthUp = 0
healthDown = 0
speedUp = 0
speedDown = 0
attackSpeedUp = 0
attackSpeedDown = 0
damageUp = 0
damageDown = 0
lifestealUp = 0
lifestealDown = 0
goldgenUp = 0
goldgenDown = 0

enum InterfaceState
{
    draw,
    nodraw
}

state = InterfaceState.nodraw
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>switch(state)
{
    case InterfaceState.draw:
        if(keyboard_check_pressed(vk_tab))
        {
            state = InterfaceState.nodraw
        }
    
        //Draw the background black to fade out the game
        draw_set_color(c_black)
        draw_set_alpha(0.6)
        draw_rectangle(0, 0, display_get_gui_width(), display_get_gui_height(), false);
        
        //Reset the alpha and color
        draw_set_color(c_white)
        draw_set_alpha(1)
        
        //Draw the player interface
        draw_sprite(sPlayerInterface, 0, display_get_gui_width() / 2, display_get_gui_height() / 2)
        
        //Draw the player on the interface
        draw_sprite_ext(sPlayer_Interface_Sprite, image_index, display_get_gui_width() / 2 - 167, display_get_gui_height() / 2 - 100, 1, 1, 0, c_white, 1)
        
        //Draw the Attribute and Cost labels
        draw_set_halign(fa_left)
        draw_set_valign(fa_top)
        draw_text_outline(display_get_gui_width() / 2 - 77, display_get_gui_height() / 2 - 150, "Attribute:", c_white, c_black)
        draw_text_outline(display_get_gui_width() / 2 + 155, display_get_gui_height() / 2 - 150, "Cost:", c_white, c_black)
        
        //Draw the Level and Gold labels
        draw_text_outline(display_get_gui_width() / 2 - 206, display_get_gui_height() / 2 - 37, "Level: ", c_white, c_black)
        draw_sprite(sGold_Icon, 0, display_get_gui_width() / 2 - 206, display_get_gui_height() / 2 + 8)
        
        //Draw the player's level and gold
        draw_set_halign(fa_right)
        draw_text_outline(display_get_gui_width() / 2 - 105, display_get_gui_height() / 2 - 37, oPlayer.level, c_white, c_black)
        draw_text_outline(display_get_gui_width() / 2 - 105, display_get_gui_height() / 2 + 8, oPlayer.gold, c_white, c_black)
        
        //Draw the names of the attributes that can be leveled up
        draw_set_halign(fa_center)
        draw_set_valign(fa_top)
        draw_text_outline(display_get_gui_width() / 2 - 16, display_get_gui_height() / 2 - 116, "Health", c_white, c_black)
        draw_text_outline(display_get_gui_width() / 2 - 16, display_get_gui_height() / 2 - 66, "Speed", c_white, c_black)
        draw_text_outline(display_get_gui_width() / 2 - 16, display_get_gui_height() / 2 - 16, "Attack Speed", c_white, c_black)
        draw_text_outline(display_get_gui_width() / 2 - 16, display_get_gui_height() / 2 + 34, "Damage", c_white, c_black)
        draw_text_outline(display_get_gui_width() / 2 - 16, display_get_gui_height() / 2 + 84, "Lifesteal", c_white, c_black)
        draw_text_outline(display_get_gui_width() / 2 - 16, display_get_gui_height() / 2 + 134, "Range", c_white, c_black)
        
        //Draw the buttons for leveling up stats
        draw_set_valign(fa_middle)
        draw_sprite(sButton, 0, display_get_gui_width() / 2 + 81, display_get_gui_height() / 2 - 108)
        draw_text_outline(display_get_gui_width() / 2 + 81, display_get_gui_height() / 2 - 108, "+", c_white, c_black)
        draw_sprite(sButton, 0, display_get_gui_width() / 2 + 126, display_get_gui_height() / 2 - 108)
        draw_text_outline(display_get_gui_width() / 2 + 125, display_get_gui_height() / 2 - 108, "-", c_white, c_black)
        
        draw_sprite(sButton, 0, display_get_gui_width() / 2 + 81, display_get_gui_height() / 2 - 58)
        draw_text_outline(display_get_gui_width() / 2 + 81, display_get_gui_height() / 2 - 58, "+", c_white, c_black)
        draw_sprite(sButton, 0, display_get_gui_width() / 2 + 126, display_get_gui_height() / 2 - 58)
        draw_text_outline(display_get_gui_width() / 2 + 125, display_get_gui_height() / 2 - 58, "-", c_white, c_black)
        
        draw_sprite(sButton, 0, display_get_gui_width() / 2 + 81, display_get_gui_height() / 2 - 8)
        draw_text_outline(display_get_gui_width() / 2 + 81, display_get_gui_height() / 2 - 8, "+", c_white, c_black)
        draw_sprite(sButton, 0, display_get_gui_width() / 2 + 126, display_get_gui_height() / 2 - 8)
        draw_text_outline(display_get_gui_width() / 2 + 125, display_get_gui_height() / 2 - 8, "-", c_white, c_black)
        
        draw_sprite(sButton, 0, display_get_gui_width() / 2 + 81, display_get_gui_height() / 2 + 42)
        draw_text_outline(display_get_gui_width() / 2 + 81, display_get_gui_height() / 2 + 42, "+", c_white, c_black)
        draw_sprite(sButton, 0, display_get_gui_width() / 2 + 126, display_get_gui_height() / 2 + 42)
        draw_text_outline(display_get_gui_width() / 2 + 125, display_get_gui_height() / 2 + 42, "-", c_white, c_black)
        
        draw_sprite(sButton, 0, display_get_gui_width() / 2 + 81, display_get_gui_height() / 2 + 92)
        draw_text_outline(display_get_gui_width() / 2 + 81, display_get_gui_height() / 2 + 92, "+", c_white, c_black)
        draw_sprite(sButton, 0, display_get_gui_width() / 2 + 126, display_get_gui_height() / 2 + 92)
        draw_text_outline(display_get_gui_width() / 2 + 125, display_get_gui_height() / 2 + 92, "-", c_white, c_black)
        
        draw_sprite(sButton, 0, display_get_gui_width() / 2 + 81, display_get_gui_height() / 2 + 142)
        draw_text_outline(display_get_gui_width() / 2 + 81, display_get_gui_height() / 2 + 142, "+", c_white, c_black)
        draw_sprite(sButton, 0, display_get_gui_width() / 2 + 126, display_get_gui_height() / 2 + 142)
        draw_text_outline(display_get_gui_width() / 2 + 125, display_get_gui_height() / 2 + 142, "-", c_white, c_black)
        
        //Draw costs for leveling a specific skill
        draw_set_halign(fa_right)
        draw_set_valign(fa_top)
        draw_text_outline(display_get_gui_width() / 2 + 213, display_get_gui_height() / 2 - 116, oPlayer.HP_cost, c_white, c_black)
        draw_text_outline(display_get_gui_width() / 2 + 213, display_get_gui_height() / 2 - 66, oPlayer.Speed_cost, c_white, c_black)
        draw_text_outline(display_get_gui_width() / 2 + 213, display_get_gui_height() / 2 - 16, oPlayer.AS_cost, c_white, c_black)
        draw_text_outline(display_get_gui_width() / 2 + 213, display_get_gui_height() / 2 + 34, oPlayer.Damage_cost, c_white, c_black)
        draw_text_outline(display_get_gui_width() / 2 + 213, display_get_gui_height() / 2 + 84, oPlayer.Lifesteal_cost, c_white, c_black)
        draw_text_outline(display_get_gui_width() / 2 + 213, display_get_gui_height() / 2 + 134, oPlayer.Range_cost, c_white, c_black)
        
        //Draw Current Levels for the player
        draw_set_halign(fa_left)
        draw_set_valign(fa_middle)
        draw_set_font(UI_Small)
        draw_text_outline(display_get_gui_width() / 2 - 215, display_get_gui_height() / 2 + 98, "Hitpoints: ", c_white, c_black)
        draw_text_outline(display_get_gui_width() / 2 - 215, display_get_gui_height() / 2 + 108, "Speed: ", c_white, c_black)
        draw_text_outline(display_get_gui_width() / 2 - 215, display_get_gui_height() / 2 + 118, "Attack Speed: ", c_white, c_black)
        draw_text_outline(display_get_gui_width() / 2 - 215, display_get_gui_height() / 2 + 128, "Damage: ", c_white, c_black)
        draw_text_outline(display_get_gui_width() / 2 - 215, display_get_gui_height() / 2 + 138, "Lifesteal: ", c_white, c_black)
        draw_text_outline(display_get_gui_width() / 2 - 215, display_get_gui_height() / 2 + 148, "Range: ", c_white, c_black)
        
        draw_text_outline(display_get_gui_width() / 2 - 135, display_get_gui_height() / 2 + 98, oPlayer.HP_level, c_white, c_black)
        draw_text_outline(display_get_gui_width() / 2 - 135, display_get_gui_height() / 2 + 108, oPlayer.Speed_level, c_white, c_black)
        draw_text_outline(display_get_gui_width() / 2 - 135, display_get_gui_height() / 2 + 118, oPlayer.AS_level, c_white, c_black)
        draw_text_outline(display_get_gui_width() / 2 - 135, display_get_gui_height() / 2 + 128, oPlayer.Damage_level, c_white, c_black)
        draw_text_outline(display_get_gui_width() / 2 - 135, display_get_gui_height() / 2 + 138, oPlayer.Lifesteal_level, c_white, c_black)
        draw_text_outline(display_get_gui_width() / 2 - 135, display_get_gui_height() / 2 + 148, oPlayer.Range_level, c_white, c_black)
        
        draw_set_halign(fa_right)
        draw_text_outline(display_get_gui_width() / 2 - 95, display_get_gui_height() / 2 + 98, oPlayer.totalHP, c_white, c_black)
        draw_text_outline(display_get_gui_width() / 2 - 95, display_get_gui_height() / 2 + 108, oPlayer.ms, c_white, c_black)
        draw_text_outline(display_get_gui_width() / 2 - 95, display_get_gui_height() / 2 + 118, 1/oPlayer.attack_speed * 10, c_white, c_black)
        draw_text_outline(display_get_gui_width() / 2 - 95, display_get_gui_height() / 2 + 128, oPlayer.damage, c_white, c_black)
        draw_text_outline(display_get_gui_width() / 2 - 95, display_get_gui_height() / 2 + 138, oPlayer.lifesteal, c_white, c_black)
        draw_text_outline(display_get_gui_width() / 2 - 95, display_get_gui_height() / 2 + 148, oPlayer.range, c_white, c_black)
        
        //Health Up
        if button_pressed(display_get_gui_width() / 2 + 81, display_get_gui_height() / 2 - 108, sButton)
        {
            if(oPlayer.HP_cost &lt;= oPlayer.gold)
            {
                oPlayer.HP_level++;
                oPlayer.gold = oPlayer.gold - oPlayer.HP_cost;
            }
        }
        
        //Health Down
        if button_pressed(display_get_gui_width() / 2 + 126, display_get_gui_height() / 2 - 108, sButton)
        {
            
        }
        
        //Speed Up
        if button_pressed(display_get_gui_width() / 2 + 81, display_get_gui_height() / 2 - 58, sButton)
        {
            if(oPlayer.Speed_cost &lt;= oPlayer.gold)
            {
                oPlayer.Speed_level++;
                oPlayer.gold = oPlayer.gold - oPlayer.Speed_cost;
            }
        }
        
        //Speed Down
        if button_pressed(display_get_gui_width() / 2 + 126, display_get_gui_height() / 2 - 58, sButton)
        {
            
        }
        
        //Attack Speed Up
        if button_pressed(display_get_gui_width() / 2 + 81, display_get_gui_height() / 2 - 8, sButton)
        {
            if(oPlayer.AS_cost &lt;= oPlayer.gold)
            {
                oPlayer.AS_level++;
                oPlayer.gold = oPlayer.gold - oPlayer.AS_cost;
            }
        }
        
        //Attack Speed Down
        if button_pressed(display_get_gui_width() / 2 + 126, display_get_gui_height() / 2 - 8, sButton)
        {
            
        }
        
        //Damage Up
        if button_pressed(display_get_gui_width() / 2 + 81, display_get_gui_height() / 2 + 42, sButton)
        {
            if(oPlayer.Damage_cost &lt;= oPlayer.gold)
            {
                oPlayer.Damage_level++;
                oPlayer.gold = oPlayer.gold - oPlayer.Damage_cost;
            }
        }
        
        //Damage Down
        if button_pressed(display_get_gui_width() / 2 + 126, display_get_gui_height() / 2 + 42, sButton)
        {
            
        }
        
        //Lifesteal Up
        if button_pressed(display_get_gui_width() / 2 + 81, display_get_gui_height() / 2 + 92, sButton)
        {
            if(oPlayer.Lifesteal_cost &lt;= oPlayer.gold)
            {
                oPlayer.Lifesteal_level++;
                oPlayer.gold = oPlayer.gold - oPlayer.Lifesteal_cost;
            }
        }
        
        //Lifesteal Down
        if button_pressed(display_get_gui_width() / 2 + 126, display_get_gui_height() / 2 + 92, sButton)
        {
            
        }
        
        //Range Up
        if button_pressed(display_get_gui_width() / 2 + 81, display_get_gui_height() / 2 + 142, sButton)
        {
            if(oPlayer.Range_cost &lt;= oPlayer.gold)
            {
                oPlayer.Range_level++;
                oPlayer.gold = oPlayer.gold - oPlayer.Range_cost;
            }
        }
        
        //Range Down
        if button_pressed(display_get_gui_width() / 2 + 126, display_get_gui_height() / 2 + 142, sButton)
        {
            
        }
        
        break;

    case InterfaceState.nodraw:
        if(keyboard_check_pressed(vk_tab))
        {
            state = InterfaceState.draw
        }
        
        break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
