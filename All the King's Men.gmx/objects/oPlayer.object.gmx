<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sPlayer_idle</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//States
enum pState
{
    Active,
    Stunned,
    Dead
}

//Initialize Player Movement
hms = 0.1;
vms = 0.1;
max_hms = 1.5;
max_vms = 1.5;

//Levels
HP_level        = 1;
Speed_level     = 1;
AS_level        = 1;
Damage_level    = 1;
Lifesteal_level = 1;
Range_level     = 1;

//Level Values
level        = (HP_level + Speed_level + AS_level + Damage_level + Lifesteal_level + Range_level) - 5;
totalHP      = 250;
ms           = 1.0;
attack_speed = 20;
damage       = 50;
lifesteal    = round(damage / 20);
rangestat    = 6;
range        = rangestat * 16;

currentMS = ms;

HP_cost        = round((oPlayer.level * 0.4 + HP_level) * 100)
Speed_cost     = round((oPlayer.level * 0.5 + Speed_level) * 100)
AS_cost        = round((oPlayer.level * 0.3 + AS_level) * 100)
Damage_cost    = round((oPlayer.level * 0.8 + Damage_level) * 100)
Lifesteal_cost = round((oPlayer.level * 0.6 + Lifesteal_level) * 100)
Range_cost     = round((oPlayer.level * 0.2 + Range_level) * 100)

lootDistance = 48;

//Attack Speed Controller
alarm[0] = attack_speed;

//Initialize Player Depth
depth = -10;

//Initialize Player Stats
currentHP = totalHP;
gold      = 0;

state   = pState.Active;
stunned = false;
slowed  = false;

global.level = oPlayer.level

shieldDebuff = false;

deathTimer = 120;
dead = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>instance_destroy();
room_restart();
alarm[1] = deathTimer;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>state = pState.Active
stunned = false
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>alarm = attack_speed;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>switch(state)
{
    case pState.Active:
        //Get Player's input
        move_up    = -keyboard_check(ord('W'));
        move_left  = -keyboard_check(ord('A'));
        move_down  =  keyboard_check(ord('S'));
        move_right =  keyboard_check(ord('D'));
        
        player_esc = keyboard_check(vk_escape);
        player_use = keyboard_check(ord('E'));
        
        //React to Player's input
        move_player_h = move_left + move_right;
        move_player_v = move_up   + move_down;
        
        hms = move_player_h * ms;
        vms = move_player_v * ms;
        
        if(player_esc)
        {
            //Show confirmation box
            
            //Save the game
            
            //Exit the game
            game_end();
        }
        
        if(keyboard_check_pressed(ord('G')))
        {
            oPlayer.gold += 100000
        }
        
        //Horizontal Collision
        if(place_meeting(x + hms, y, oWall))
        {
            while(!place_meeting(x + sign(hms), y, oWall))
            {
                x += sign(hms);
            }
            
            hms = 0;
        }
        
        //Horizontal Collision with Enemies
        if(place_meeting(x + hms, y, oEnemy))
        {
            //Take damage from the enemy
            
            //Stop the player from walking through the enemy
            while(!place_meeting(x + sign(hms), y, oEnemy))
            {
                x += sign(hms);
            }
            
            hms = 0;
        }
        
        
        x += hms;
        
        //Vertical Collision
        if(place_meeting(x, y + vms, oWall))
        {
            //Take damage from the enemy
            
            //Stop the player from walking through the enemy
            while(!place_meeting(x, y + sign(vms), oWall))
            {
                y += sign(vms);
            }
            
            vms = 0;
        }
        
        //Vertical Collision with Enemies
        if(place_meeting(x, y + vms, oEnemy))
        {
            while(!place_meeting(x, y + sign(vms), oEnemy))
            {
                y += sign(vms);
            }
            
            vms = 0;
        }
        
        y += vms;
        
        //Sprite Handling
        if(move_player_h != 0)
        {
            image_xscale = move_player_h;
        }
        
        if(move_player_h == 0 &amp;&amp; move_player_v == 0)
        {
            sprite_index = sPlayer_idle;
        }
        else
        {
            sprite_index = sPlayer_Walk;
        }
        
        //Shooting
        shoot_up    = -keyboard_check(vk_up);
        shoot_left  = -keyboard_check(vk_left);
        shoot_down  = keyboard_check(vk_down);
        shoot_right = keyboard_check(vk_right);
        
        shoot_h = shoot_left + shoot_right;
        shoot_v = shoot_up + shoot_down;
        
        if(alarm[0] = attack_speed)
        {
            //Up &amp; Left
            if(shoot_v &lt; 0 &amp;&amp; shoot_h &lt; 0)
            {
                var proj;
                
                proj = instance_create(x - 8, y - 8, oPlayer_Projectile);
                proj.direction = 135;
                
                proj.xgoal = oPlayer.x - 8 - oPlayer.range;
                proj.ygoal = oPlayer.y - 8 - oPlayer.range;
            }
            
            //Up &amp; Right
            else if(shoot_v &lt; 0 &amp;&amp; shoot_h &gt; 0)
            {
                var proj;
                
                proj = instance_create(x + 8, y - 8, oPlayer_Projectile);
                proj.direction = 45;
                
                proj.xgoal = oPlayer.x + 8 + oPlayer.range;
                proj.ygoal = oPlayer.y - 8 - oPlayer.range;
            }
            
            //Down &amp; Left
            else if(shoot_v &gt; 0 &amp;&amp; shoot_h &lt; 0)
            {
                var proj;
                
                proj = instance_create(x - 8, y + 8, oPlayer_Projectile);
                proj.direction = 225;
                
                proj.xgoal = oPlayer.x - 8 - oPlayer.range;
                proj.ygoal = oPlayer.y + 8 + oPlayer.range;
            }
            
            //Down &amp; Right
            else if(shoot_v &gt; 0 &amp;&amp; shoot_h &gt; 0)
            {
                var proj;
                
                proj = instance_create(x + 8, y + 8, oPlayer_Projectile);
                proj.direction = 315;
                
                proj.xgoal = oPlayer.x + 8 + oPlayer.range;
                proj.ygoal = oPlayer.y + 8 + oPlayer.range;
            }
            
            //Up
            else if(shoot_v &lt; 0)
            {
                var proj;
                
                proj = instance_create(x, y - 8, oPlayer_Projectile);
                proj.direction = 90;
                
                proj.xgoal = oPlayer.x;
                proj.ygoal = oPlayer.y - 8 - oPlayer.range;
            }
            
            //Down
            else if(shoot_v &gt; 0)
            {
                var proj;
                
                proj = instance_create(x, y + 8, oPlayer_Projectile);
                proj.direction = 270;
                
                proj.xgoal = oPlayer.x;
                proj.ygoal = oPlayer.y + 8 + oPlayer.range;
            }
            
            //Left
            else if(shoot_h &lt; 0)
            {
                var proj;
                
                proj = instance_create(x - 8, y, oPlayer_Projectile);
                proj.direction = 180;
                
                proj.xgoal = oPlayer.x - 8 - oPlayer.range;
                proj.ygoal = oPlayer.y;
            }
            
            //Right
            else if(shoot_h &gt; 0)
            {
                var proj;
                
                proj = instance_create(x + 8, y, oPlayer_Projectile);
                proj.direction = 0;
                
                proj.xgoal = oPlayer.x + 8 + oPlayer.range;
                proj.ygoal = oPlayer.y;
            }
            
        }
        
        if(currentHP &lt;= 0)
        {
            state = pState.Dead
        }
        
        break;
        
    case pState.Stunned:
        if(stunned = false)
        {
            sprite_index = sPlayer_idle
            stunned = true;
            alarm[1] = 3 * room_speed
        }
        
        break;
        
    case pState.Dead:
        sprite_index = sPlayer_idle;
        image_index = 0;
        
        currentHP = 0;
        
        dead_angle = 90;
        
        if(image_angle != dead_angle)
        {
            image_angle += 5;
        }
        
        if(dead = false)
        {
            alarm[2] = deathTimer;
            dead = true;
        }
        
        break;
}

if(global.level &lt; oPlayer.level)
{
    global.level = oPlayer.level
    oPlayer.currentHP = oPlayer.totalHP
}
level          = (HP_level + Speed_level + AS_level + Damage_level + Lifesteal_level + Range_level) - 5;

HP_cost        = round((oPlayer.level * 0.4 + HP_level) * 10)
Speed_cost     = round((oPlayer.level * 0.5 + Speed_level) * 10)
AS_cost        = round((oPlayer.level * 0.3 + AS_level) * 10)
Damage_cost    = round((oPlayer.level * 0.8 + Damage_level) * 10)
Lifesteal_cost = round((oPlayer.level * 0.6 + Lifesteal_level) * 10)
Range_cost     = round((oPlayer.level * 0.2 + Range_level) * 10)

totalHP = 220 + (HP_level * 30)
ms = 1.0 + (Speed_level/10)
damage = 50 + (Damage_level * 3)
lifesteal = 2 + (Lifesteal_level * 2)
range = rangestat * 16 + (4 * Range_level)
attack_speed = 20 - round(AS_level/5)

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>display_set_gui_size(view_wport[0], view_hport[0]);

healthbarStart = 32;
playerHP = oPlayer.currentHP/oPlayer.totalHP;

if(playerHP == 1)
{
    healthbarEnd = 121;
    healthLength = healthbarEnd - healthbarStart - 7;
    
    draw_sprite(sUI_HealthBar, 0, 5, 446);
    draw_sprite(sUI_HealthLeftFill, 0, healthbarStart, 451);
    draw_sprite_stretched(sUI_Health, 0, healthbarStart + 7, 451, healthLength, 14);
    draw_sprite(sUI_HealthRightFill, 0, healthbarEnd, 451);
}
else if(playerHP &gt;= 0.02)
{
    healthbarEnd = round(89 * playerHP);
    healthLength = healthbarEnd - healthbarStart - 7 + 32;
    
    draw_sprite(sUI_HealthBar, 0, 5, 446);
    draw_sprite(sUI_HealthLeftFill, 0, healthbarStart, 451);
    draw_sprite_stretched(sUI_Health, 0, healthbarStart + 7, 451, healthLength, 14);
    draw_sprite(sUI_HealthRightFill, 0, healthbarEnd + 32, 451);
}
else if(playerHP &lt; 0.02)
{
    draw_sprite(sUI_HealthBar, 0, 5, 446);
    healthbarEnd = 39;
}

draw_set_font(UI_Small);
draw_set_halign(fa_left);
draw_set_valign(fa_middle);
draw_text_outline(60, 457, string(oPlayer.currentHP) + "/" + string(oPlayer.totalHP), c_white, c_black);

//Draw the Player's Stats
draw_set_halign(fa_right);
draw_set_valign(fa_top);

//Draw Gold Total
draw_sprite(sUI_GoldBar, 0, 520, 5);

//Draw Location
draw_sprite(sUI_LocationBar, 0, 5, 5);

//Draw Gold Amount
draw_set_font(UI);
draw_text_outline(603, 10, string(oPlayer.gold), c_white, c_black);

//Draw Location Information
draw_set_font(UI);
draw_set_halign(fa_center);
draw_text_outline(85, 11, "The Archives", c_white, c_black);


if(oPlayer.shieldDebuff = true)
{
    draw_sprite(sDebuff, 0, view_wport[0] - 32, view_hport[0] - 32);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_self();

if(oPlayer.state = pState.Stunned)
{
    draw_sprite(sStun, 0, oPlayer.x + 4, oPlayer.y - 22);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
