<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sRogue</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>oEnemy</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Name
name = "Rogue";

//Level
level = 1;

//HP
totalhp   = 650;
currenthp = totalhp;

//Movement
ms = 1.2;

//Attack Speed
attackSpeed = 60;
alarm[0]    = attackSpeed;

//Damage
damage = irandom_range(15, 22);

//Attack &amp; Aggro Ranges
aggroRange = 256;
//96
attackRange = 48;

//Current State
state = eState.idle;

//Aggro State
angry = false;

//Dead/Alive State
dead       = false;
deathTimer = 360;

//Generate Gold State
goldGen = false;

resurrect = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(oRogue.resurrect = true)
{
    state = eState.moving;
    currenthp = totalhp;
    image_angle = 0
    dead = false;
    resurrect = false;
}
else
{
    if(goldGen = false)
    {
        for(var i = 0; i &lt; irandom_range(2, 5); i++)
        {
            goldPiece = instance_create(x, y, oGold);
            goldPiece.direction = 0;
            
            goldPiece.xgoal = x + irandom_range(-8, 8);
            goldPiece.ygoal = y + irandom_range(-8, 8);
        }
        goldGen = true;
    }
    
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>alarm[0] = attackSpeed;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>switch(state)
{
    case eState.idle:
        sprite_index = sRogue_Idle;
        
        aggro = collision_circle(x, y, aggroRange, oPlayer, false, false);
        
        if(aggro)
        {
            state = eState.moving;
        }
        
        if(currenthp &lt;= 0)
        {
            state = eState.dead;
        }
        
        break;
    
    case eState.moving:
        sprite_index = sRogue;
        
        aggro = collision_circle(x, y, aggroRange, oPlayer, false, false);
        attack = collision_circle(x, y, attackRange, oPlayer, false, false);
        
        if(aggro || angry)
        {
            mp_potential_step(oPlayer.x, oPlayer.y, ms, false);
            angry = true;
        }
        
        if(currenthp &lt;= 0)
        {
            state = eState.dead;
        }
        
        if(attack)
        {
            state = eState.attacking;
        }
        
        break;
    
    case eState.attacking:
        sprite_index = sRogue_Idle;
        
        attack = collision_circle(x, y, attackRange, oPlayer, false, false);
        
        if(!attack)
        {
            state = eState.moving;
        }
        
        if(alarm[0] = attackSpeed)
        {
            var proj;
            
            proj = instance_create(x, y, oThrowing_Knife);
            proj.direction = point_direction(x, y, oPlayer.x, oPlayer.y);
            
            proj.xgoal = oPlayer.x;
            proj.ygoal = oPlayer.y;
        }
        
        if(currenthp &lt;= 0)
        {
            state = eState.dead;
        }
        
        break;
    
    case eState.dead:
        sprite_index = sRogue_Idle;
        image_index = 0;
        
        dead_angle = 90;
        
        if(image_angle != dead_angle)
        {
            image_angle += 5;
        }
        
        if(dead = false)
        {
            alarm[1] = deathTimer;
            dead = true;
        }
        
        break;
}

if(direction &gt;= 90 &amp;&amp; direction &lt;= 270)
{
    image_xscale = 1;
}
else
{
    image_xscale = -1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_self()

//Healthbar
healthval = (currenthp / totalhp) * 100;
if(image_xscale = 1)
{
    draw_healthbar(x - sprite_width - 2, y - 11, x + sprite_width + 2, y - 10, healthval, c_black, c_red, c_lime, 0, false, true);
}
else
{
    draw_healthbar(x + sprite_width - 2, y - 11, x - sprite_width + 2, y - 10, healthval, c_black, c_red, c_lime, 0, false, true);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
